---
description: 
globs: 
alwaysApply: true
---
# Cursor AI project rules for Kontraktor
#
# This file instructs Cursor's agentic AI on style, context and constraints
# when generating or editing code in this repository.
# It follows Cursor's declarative schema:
#   rules: [ { pattern?: string, content: string } ]
# Each rule applies globally unless a `pattern` (regex on file‑path) is supplied.

rules:
  # ---------------------------------------------------------------------
  - name: Global‑Product‑Context
    content: |
      You are contributing to **Kontraktor**, an OSS builder‑helper written in Go.
      Key architecture tenets (full details in docs/architecture.md):
      • Central Configuration Library backed by DuckDB (non‑secret vars).
      • Secret aggregation only (Azure KV, AWS SM, HashiCorp Vault) – never persist secrets.
      • Versioned YAML taskfiles (`taskfile.ktr.yml` version 0.3) executed by the CLI.
      • Exposed API (REST+gRPC) documented via OpenAPI 3.1.
      • Terraform provider uses terraform‑plugin‑framework.
      • Codebase root layout: cmd/, internal/, provider‑terraform/, web/.
      Always respect these constraints in every snippet.

  # ---------------------------------------------------------------------
  - name: Go‑Style‑Guide
    pattern: "\\.go$"
    content: |
      Follow idiomatic **Go 1.22+** practices:
      • One small package per concern; no circular deps; import path aliases banned.
      • Functions return `(T, error)` – use `%w` for wrapping and `errors.Is/As` for checks.
      • Always accept `ctx context.Context` as first arg on I/O or long‑running funcs.
      • Keep interfaces tiny (≤ 3 methods). Define on consumer side.
      • Prefer `sync/errgroup` over manual waitgroups when fan‑out.
      • Use generics conservatively – only when it removes duplication.
      • File header: `// Package <name> …` Godoc; export comments start with ident.
      • Run `go vet`, `staticcheck`, `golangci‑lint run` clean.
      • Tests live in `*_test.go`; strive for ≥ 80 % coverage on internal pkgs.
      • No `log.Fatal`; return errors upward. Use structured logger (zap or zerolog).

  # ---------------------------------------------------------------------
  - name: CLI‑Commands
    pattern: "^cmd/ktr/"
    content: |
      All Cobra commands:
      • Register under `rootCmd` in `init()`; use verbs (`tf‑plan`, `config get`).
      • Bind flags via Viper; zero env vars hard‑coded.
      • Use `RunE` and bubble errors.

  # ---------------------------------------------------------------------
  - name: API‑Handlers
    pattern: "^cmd/api/|^internal/.*handler.*.go$"
    content: |
      Generated Chi routes from oapi‑codegen **must** be wrapped with:
      • Auth middleware (`auth.RequireScope`).
      • Request‑scoped structured logger.
      • Metrics (`otelchi`).
      When returning errors, map to RFC 7807 problem+json bodies.

  # ---------------------------------------------------------------------
  - name: Terraform‑Provider
    pattern: "^provider‑terraform/"
    content: |
      Provider must compile against terraform‑plugin‑framework v1.
      • Place resources in `internal/provider/resource_*`. One file per resource.
      • Model structs with explicit `tfsdk` tags; implement `Configure` to set API client.
      • Always support plan‑time diff‑suppression for secret values.

  # ---------------------------------------------------------------------
  - name: YAML‑Schema‑Versioning
    pattern: "taskfile\\.ktr\\.yml$"
    content: |
      Validate against embedded JSON schema **0.3**. Reject unknown root keys unless version > 0.3.
      Provide helpful error paths when returning validation failures.

  # ---------------------------------------------------------------------
  - name: Prompting‑Tips
    content: |
      When you need additional context:
      • Ask the developer which component or file to focus on.
      • Summarize what you know about Kontraktor before asking a follow‑up.
      • Propose tests or integration points, not only implementation code.
      • Offer to update docs or Taskfile targets when adding new commands.

  # ---------------------------------------------------------------------
  - name: Commit‑Message‑Conventions
    content: |
      Suggest Conventional Commits (`feat:`, `fix:`, `chore:`). Include scope (`api`, `cli`, `docs`).
      Body lines wrap at 72 chars; reference issue numbers.

  # ---------------------------------------------------------------------
  - name: Dependency‑Management
    pattern: "go\.mod$"
    content: |
      Use minimal version selection. Avoid indirect dependencies drift by running `go mod tidy`.
      For binary tools (oapi‑codegen, jsonschema), pin via `tools.go` build tag.
