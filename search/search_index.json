{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Kontraktor","text":"<p>Kontraktor is a powerful builder-helper that unifies environment configuration, secret aggregation, and developer task automation. Inspired by taskfile.dev but extended with a centralized configuration library and remote-vault integration.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#central-configuration-library","title":"Central Configuration Library","text":"<ul> <li>Version-controlled, queryable configuration across many projects and git repositories</li> <li>Stored in DuckDB (non-secret only)</li> <li>Easy to maintain and share configurations</li> </ul>"},{"location":"#secret-aggregation-layer","title":"Secret Aggregation Layer","text":"<ul> <li>Read-only connectors to various secret management systems:</li> <li>Azure Key Vault</li> <li>HashiCorp Vault</li> <li>AWS Secrets Manager</li> <li>No secrets persisted in Kontraktor</li> <li>Secure secret management</li> </ul>"},{"location":"#task-runner","title":"Task Runner","text":"<ul> <li>Local execution of Bash (macOS/Linux) routines</li> <li>Expressive YAML syntax (<code>taskfile.ktr.yml</code>)</li> <li>Task dependencies and imports</li> <li>Environment variable management</li> <li>Argument passing and validation</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>Taskfile Format</li> <li>Secret Management</li> </ul>"},{"location":"#example-taskfile","title":"Example Taskfile","text":"<pre><code>version: \"0.3\"\n\nenvironment:\n  GLOBAL_VAR: global-value\n\ntasks:\n  hello:\n    desc: A simple hello world task\n    args:\n      - name: name\n        type: string\n        default: World\n    cmds:\n      - echo \"Hello, ${name}!\"\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for more information.</p>"},{"location":"#license","title":"License","text":"<p>Kontraktor is open source software licensed under the GNU 3.0. </p>"},{"location":"contributing/","title":"Contributing to Kontraktor","text":"<p>Thank you for your interest in contributing to Kontraktor! This guide will help you get started with the development process.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ol> <li>Go 1.22 or newer</li> <li>Install from golang.org</li> <li> <p>Verify installation:      <pre><code>go version\n</code></pre></p> </li> <li> <p>Git</p> </li> <li>Install from git-scm.com</li> <li> <p>Verify installation:      <pre><code>git --version\n</code></pre></p> </li> <li> <p>Development Tools</p> </li> <li>golangci-lint for linting</li> <li>goimports for import formatting</li> <li>gofmt for code formatting</li> </ol>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the Repository</li> <li>Visit github.com/kontraktor-sh/kontraktor</li> <li> <p>Click \"Fork\" to create your copy</p> </li> <li> <p>Clone Your Fork <pre><code>git clone https://github.com/YOUR_USERNAME/kontraktor.git\ncd kontraktor\n</code></pre></p> </li> <li> <p>Add Upstream Remote <pre><code>git remote add upstream https://github.com/kontraktor-sh/kontraktor.git\n</code></pre></p> </li> <li> <p>Install Dependencies <pre><code>go mod download\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#branching-strategy","title":"Branching Strategy","text":"<ol> <li>Main Branch</li> <li><code>main</code>: Production-ready code</li> <li> <p><code>develop</code>: Development branch</p> </li> <li> <p>Feature Branches</p> </li> <li>Format: <code>feature/description</code></li> <li> <p>Example: <code>feature/azure-keyvault</code></p> </li> <li> <p>Bug Fix Branches</p> </li> <li>Format: <code>fix/description</code></li> <li>Example: <code>fix/secret-rotation</code></li> </ol>"},{"location":"contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a Branch <pre><code>git checkout -b feature/your-feature\n</code></pre></p> </li> <li> <p>Make Changes</p> </li> <li>Write code</li> <li>Add tests</li> <li> <p>Update documentation</p> </li> <li> <p>Run Tests <pre><code>go test ./...\n</code></pre></p> </li> <li> <p>Run Linter <pre><code>golangci-lint run\n</code></pre></p> </li> <li> <p>Format Code <pre><code>go fmt ./...\ngoimports -w .\n</code></pre></p> </li> <li> <p>Commit Changes <pre><code>git add .\ngit commit -m \"feat: add new feature\"\n</code></pre></p> </li> <li> <p>Push Changes <pre><code>git push origin feature/your-feature\n</code></pre></p> </li> </ol>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create Pull Request</li> <li>Visit your fork on GitHub</li> <li>Click \"New Pull Request\"</li> <li> <p>Select <code>develop</code> as the base branch</p> </li> <li> <p>Pull Request Template</p> </li> <li>Fill out the PR template</li> <li>Describe changes</li> <li>Link related issues</li> <li> <p>Add screenshots if applicable</p> </li> <li> <p>Code Review</p> </li> <li>Address review comments</li> <li>Update PR as needed</li> <li> <p>Ensure CI passes</p> </li> <li> <p>Merge</p> </li> <li>Squash and merge</li> <li>Delete feature branch</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":""},{"location":"contributing/#go-code","title":"Go Code","text":"<ol> <li>Formatting</li> <li>Use <code>gofmt</code></li> <li>Follow Effective Go</li> <li> <p>Use <code>goimports</code> for import organization</p> </li> <li> <p>Naming</p> </li> <li>Use camelCase for variables</li> <li>Use PascalCase for exported names</li> <li> <p>Use short names in small scopes</p> </li> <li> <p>Comments</p> </li> <li>Document exported functions</li> <li>Use complete sentences</li> <li>Follow godoc style</li> </ol>"},{"location":"contributing/#yaml-files","title":"YAML Files","text":"<ol> <li>Formatting</li> <li>Use 2 spaces for indentation</li> <li>Use consistent quotes</li> <li> <p>Sort keys alphabetically</p> </li> <li> <p>Comments</p> </li> <li>Use <code>#</code> for comments</li> <li>Add section headers</li> <li>Document complex configurations</li> </ol>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#unit-tests","title":"Unit Tests","text":"<ol> <li>Test Files</li> <li>Name: <code>*_test.go</code></li> <li>Location: Same directory as source</li> <li> <p>Package: Same as source</p> </li> <li> <p>Test Functions <pre><code>func TestFunction(t *testing.T) {\n    // Arrange\n    // Act\n    // Assert\n}\n</code></pre></p> </li> <li> <p>Table-Driven Tests <pre><code>func TestFunction(t *testing.T) {\n    tests := []struct {\n        name     string\n        input    string\n        expected string\n    }{\n        // Test cases\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            // Test logic\n        })\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"contributing/#integration-tests","title":"Integration Tests","text":"<ol> <li>Test Files</li> <li>Name: <code>*_integration_test.go</code></li> <li>Location: <code>tests/</code> directory</li> <li> <p>Package: <code>tests</code></p> </li> <li> <p>Test Setup <pre><code>func TestMain(m *testing.M) {\n    // Setup\n    code := m.Run()\n    // Teardown\n    os.Exit(code)\n}\n</code></pre></p> </li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#code-documentation","title":"Code Documentation","text":"<ol> <li> <p>Package Documentation <pre><code>// Package name provides functionality for...\npackage name\n</code></pre></p> </li> <li> <p>Function Documentation <pre><code>// FunctionName does something.\n// It takes parameters and returns results.\nfunc FunctionName() error {\n    // Implementation\n}\n</code></pre></p> </li> </ol>"},{"location":"contributing/#user-documentation","title":"User Documentation","text":"<ol> <li>Markdown Files</li> <li>Location: <code>docs/</code> directory</li> <li>Format: Markdown</li> <li> <p>Include code examples</p> </li> <li> <p>API Documentation</p> </li> <li>Location: <code>docs/api/</code> directory</li> <li>Format: OpenAPI/Swagger</li> <li>Include request/response examples</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<ol> <li>Version Bumping</li> <li>Update version in <code>VERSION</code> file</li> <li>Update changelog</li> <li> <p>Tag release</p> </li> <li> <p>Release Steps <pre><code># Update version\necho \"1.0.0\" &gt; VERSION\n\n# Update changelog\n# Commit changes\ngit commit -am \"chore: release v1.0.0\"\n\n# Tag release\ngit tag -a v1.0.0 -m \"Release v1.0.0\"\n\n# Push changes\ngit push origin main --tags\n</code></pre></p> </li> </ol>"},{"location":"contributing/#community-guidelines","title":"Community Guidelines","text":""},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<ol> <li>Be Respectful</li> <li>Use welcoming language</li> <li>Be patient with others</li> <li> <p>Accept constructive criticism</p> </li> <li> <p>Be Professional</p> </li> <li>Focus on the code</li> <li>Avoid personal attacks</li> <li> <p>Keep discussions constructive</p> </li> <li> <p>Be Helpful</p> </li> <li>Answer questions</li> <li>Share knowledge</li> <li>Mentor others</li> </ol>"},{"location":"contributing/#communication","title":"Communication","text":""},{"location":"contributing/#issues","title":"Issues","text":"<ul> <li>Use templates</li> <li>Provide context</li> <li>Be specific</li> </ul>"},{"location":"contributing/#discussions","title":"Discussions","text":"<ul> <li>Use appropriate channels</li> <li>Stay on topic</li> <li>Be constructive</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ul> <li>Follow guidelines</li> <li>Be responsive</li> <li>Keep changes focused</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":""},{"location":"contributing/#documentation_1","title":"Documentation","text":"<ul> <li>Read the docs</li> <li>Check examples</li> <li>Search issues</li> </ul>"},{"location":"contributing/#community","title":"Community","text":"<ul> <li>Join discussions</li> <li>Ask questions</li> <li>Share ideas</li> </ul>"},{"location":"contributing/#support","title":"Support","text":"<ul> <li>Open issues</li> <li>Contact maintainers</li> <li>Use chat channels </li> </ul>"},{"location":"advanced/azure-keyvault/","title":"Azure Key Vault Integration","text":"<p>This guide explains how to integrate Kontraktor with Azure Key Vault for secure secret management.</p>"},{"location":"advanced/azure-keyvault/#prerequisites","title":"Prerequisites","text":"<ol> <li>Azure Subscription</li> <li>Active Azure subscription</li> <li> <p>Proper permissions to create and manage Key Vaults</p> </li> <li> <p>Azure CLI</p> </li> <li>Install the Azure CLI</li> <li> <p>Log in to your Azure account:      <pre><code>az login\n</code></pre></p> </li> <li> <p>Azure Key Vault</p> </li> <li>Create a Key Vault:      <pre><code>az keyvault create --name my-keyvault --resource-group my-resource-group --location eastus\n</code></pre></li> </ol>"},{"location":"advanced/azure-keyvault/#authentication","title":"Authentication","text":"<p>Kontraktor uses Azure's Default Credential Chain for authentication. This means it will try the following methods in order:</p> <ol> <li>Environment variables</li> <li>Managed Identity</li> <li>Azure CLI credentials</li> <li>Visual Studio Code credentials</li> <li>Azure PowerShell credentials</li> </ol>"},{"location":"advanced/azure-keyvault/#environment-variables","title":"Environment Variables","text":"<p>Set the following environment variables:</p> <pre><code>export AZURE_TENANT_ID=\"your-tenant-id\"\nexport AZURE_CLIENT_ID=\"your-client-id\"\nexport AZURE_CLIENT_SECRET=\"your-client-secret\"\n</code></pre>"},{"location":"advanced/azure-keyvault/#managed-identity","title":"Managed Identity","text":"<p>If running in Azure (e.g., Azure VM, App Service), you can use Managed Identity:</p> <ol> <li>Enable Managed Identity on your resource</li> <li>Grant the identity access to Key Vault:    <pre><code>az keyvault set-policy --name my-keyvault --object-id &lt;identity-object-id&gt; --secret-permissions get list\n</code></pre></li> </ol>"},{"location":"advanced/azure-keyvault/#configuration","title":"Configuration","text":""},{"location":"advanced/azure-keyvault/#taskfile-configuration","title":"Taskfile Configuration","text":"<p>Configure Azure Key Vault in your taskfile:</p> <pre><code>version: \"0.3\"\n\nvaults:\n  azure_keyvault:\n    my-vault:\n      keyvault_name: my-keyvault\n      secrets:\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n</code></pre>"},{"location":"advanced/azure-keyvault/#secret-management","title":"Secret Management","text":"<ol> <li> <p>Adding Secrets <pre><code>az keyvault secret set --vault-name my-keyvault --name api-secret --value \"secret-value\"\n</code></pre></p> </li> <li> <p>Updating Secrets <pre><code>az keyvault secret set --vault-name my-keyvault --name api-secret --value \"new-value\"\n</code></pre></p> </li> <li> <p>Deleting Secrets <pre><code>az keyvault secret delete --vault-name my-keyvault --name api-secret\n</code></pre></p> </li> </ol>"},{"location":"advanced/azure-keyvault/#using-secrets-in-tasks","title":"Using Secrets in Tasks","text":""},{"location":"advanced/azure-keyvault/#basic-usage","title":"Basic Usage","text":"<pre><code>tasks:\n  deploy:\n    desc: Deploy with secrets\n    cmds:\n      - echo \"Using API key: ${API_KEY}\"\n      - echo \"Using DB password: ${DB_PASSWORD}\"\n</code></pre>"},{"location":"advanced/azure-keyvault/#secret-rotation","title":"Secret Rotation","text":"<pre><code>tasks:\n  rotate-secrets:\n    desc: Rotate secrets\n    cmds:\n      - |\n        # Generate new secret\n        NEW_SECRET=$(openssl rand -base64 32)\n\n        # Update in Azure Key Vault\n        az keyvault secret set --vault-name my-keyvault --name api-secret --value \"$NEW_SECRET\"\n\n        # Verify update\n        echo \"Secret rotated successfully\"\n</code></pre>"},{"location":"advanced/azure-keyvault/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Access Control</li> <li>Use least privilege principle</li> <li>Regularly audit access</li> <li> <p>Use Managed Identities when possible</p> </li> <li> <p>Secret Management</p> </li> <li>Rotate secrets regularly</li> <li>Use strong secret values</li> <li> <p>Monitor secret access</p> </li> <li> <p>Network Security</p> </li> <li>Use private endpoints</li> <li>Enable firewall rules</li> <li> <p>Use VNET integration</p> </li> <li> <p>Monitoring</p> </li> <li>Enable diagnostic logging</li> <li>Set up alerts</li> <li>Monitor access patterns</li> </ol>"},{"location":"advanced/azure-keyvault/#troubleshooting","title":"Troubleshooting","text":""},{"location":"advanced/azure-keyvault/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Authentication Failures <pre><code># Check Azure CLI login\naz account show\n\n# Verify environment variables\nenv | grep AZURE\n</code></pre></p> </li> <li> <p>Permission Issues <pre><code># Check Key Vault access\naz keyvault show --name my-keyvault\n\n# List access policies\naz keyvault show --name my-keyvault --query properties.accessPolicies\n</code></pre></p> </li> <li> <p>Network Issues <pre><code># Test connectivity\ncurl -v https://my-keyvault.vault.azure.net\n</code></pre></p> </li> </ol>"},{"location":"advanced/azure-keyvault/#debugging","title":"Debugging","text":"<p>Enable debug logging:</p> <pre><code>KONTRAKTOR_DEBUG=1 kontraktor run task-name\n</code></pre>"},{"location":"advanced/azure-keyvault/#advanced-topics","title":"Advanced Topics","text":""},{"location":"advanced/azure-keyvault/#multiple-key-vaults","title":"Multiple Key Vaults","text":"<pre><code>version: \"0.3\"\n\nvaults:\n  azure_keyvault:\n    prod-vault:\n      keyvault_name: prod-keyvault\n      secrets:\n        PROD_API_KEY: api-secret\n    dev-vault:\n      keyvault_name: dev-keyvault\n      secrets:\n        DEV_API_KEY: api-secret\n</code></pre>"},{"location":"advanced/azure-keyvault/#secret-versioning","title":"Secret Versioning","text":"<pre><code>tasks:\n  deploy-specific-version:\n    desc: Deploy with specific secret version\n    cmds:\n      - echo \"Using specific version of secret\"\n      - az keyvault secret show --vault-name my-keyvault --name api-secret --version \"specific-version\"\n</code></pre>"},{"location":"advanced/azure-keyvault/#backup-and-restore","title":"Backup and Restore","text":"<pre><code>tasks:\n  backup-secrets:\n    desc: Backup Key Vault secrets\n    cmds:\n      - |\n        # Backup secrets\n        for secret in $(az keyvault secret list --vault-name my-keyvault --query \"[].id\" -o tsv); do\n          az keyvault secret backup --vault-name my-keyvault --id \"$secret\" --file \"backup-$(basename $secret).bak\"\n        done\n</code></pre>"},{"location":"advanced/azure-keyvault/#examples","title":"Examples","text":""},{"location":"advanced/azure-keyvault/#complete-example","title":"Complete Example","text":"<pre><code>version: \"0.3\"\n\nvaults:\n  azure_keyvault:\n    prod-vault:\n      keyvault_name: prod-keyvault\n      secrets:\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n        JWT_SECRET: jwt-secret\n\ntasks:\n  deploy:\n    desc: Deploy to production\n    environment:\n      ENVIRONMENT: prod\n    cmds:\n      - echo \"Deploying to ${ENVIRONMENT}\"\n      - echo \"Using API key: ${API_KEY}\"\n      - echo \"Using DB password: ${DB_PASSWORD}\"\n      - echo \"Using JWT secret: ${JWT_SECRET}\"\n\n  rotate-secrets:\n    desc: Rotate production secrets\n    cmds:\n      - |\n        # Rotate API key\n        NEW_API_KEY=$(openssl rand -base64 32)\n        az keyvault secret set --vault-name prod-keyvault --name api-secret --value \"$NEW_API_KEY\"\n\n        # Rotate DB password\n        NEW_DB_PASSWORD=$(openssl rand -base64 32)\n        az keyvault secret set --vault-name prod-keyvault --name db-secret --value \"$NEW_DB_PASSWORD\"\n\n        # Rotate JWT secret\n        NEW_JWT_SECRET=$(openssl rand -base64 32)\n        az keyvault secret set --vault-name prod-keyvault --name jwt-secret --value \"$NEW_JWT_SECRET\"\n\n        echo \"All secrets rotated successfully\"\n</code></pre>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install Kontraktor on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.22 or newer installed (Download Go)</li> <li>Git (for cloning the repository)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#from-source","title":"From Source","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/kontraktor-sh/kontraktor.git\ncd kontraktor\n</code></pre></p> </li> <li> <p>Build the CLI:    <pre><code>go build -o kontraktor ./cmd/kontraktor\n</code></pre></p> </li> <li> <p>Install the binary:</p> </li> <li>System-wide installation (requires sudo):      <pre><code>sudo mv kontraktor /usr/local/bin/\n</code></pre></li> <li>User-local installation (make sure <code>~/go/bin</code> is in your <code>$PATH</code>):      <pre><code>mv kontraktor ~/go/bin/\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#using-go-install","title":"Using Go Install","text":"<p>You can also install Kontraktor directly using Go:</p> <pre><code>go install github.com/kontraktor-sh/kontraktor/cmd/kontraktor@latest\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that Kontraktor is properly installed:</p> <pre><code>kontraktor --help\n</code></pre> <p>You should see the help message with available commands and options.</p>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":"<p>Kontraktor uses a configuration file named <code>taskfile.ktr.yml</code> in your project directory. See the Taskfile Format guide for details on how to configure your tasks.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Quick Start Guide to learn how to use Kontraktor</li> <li>Check out the Taskfile Format documentation</li> <li>Learn about Secret Management</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<ol> <li>Command not found</li> <li>Ensure the installation directory is in your <code>$PATH</code></li> <li> <p>Try running <code>which kontraktor</code> to verify the installation location</p> </li> <li> <p>Permission denied</p> </li> <li>Check file permissions: <code>chmod +x /path/to/kontraktor</code></li> <li> <p>Ensure you have the necessary permissions for the installation directory</p> </li> <li> <p>Go version issues</p> </li> <li>Verify your Go version: <code>go version</code></li> <li>Update Go if necessary</li> </ol> <p>If you encounter any other issues, please open an issue on GitHub. </p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Kontraktor quickly.</p>"},{"location":"getting-started/quickstart/#your-first-taskfile","title":"Your First Taskfile","text":"<p>Create a new file named <code>taskfile.ktr.yml</code> in your project directory:</p> <pre><code>version: \"0.3\"\n\nenvironment:\n  GREETING: \"Hello\"\n\ntasks:\n  hello:\n    desc: A simple hello world task\n    args:\n      - name: name\n        type: string\n        default: World\n    cmds:\n      - echo \"${GREETING}, ${name}!\"\n</code></pre>"},{"location":"getting-started/quickstart/#running-tasks","title":"Running Tasks","text":"<p>To run the <code>hello</code> task with default arguments:</p> <pre><code>kontraktor run hello\n</code></pre> <p>To provide a custom argument:</p> <pre><code>kontraktor run hello name=John\n</code></pre>"},{"location":"getting-started/quickstart/#task-dependencies","title":"Task Dependencies","text":"<p>You can create tasks that depend on other tasks:</p> <pre><code>version: \"0.3\"\n\ntasks:\n  setup:\n    desc: Setup the environment\n    cmds:\n      - echo \"Setting up environment...\"\n      - mkdir -p build\n\n  build:\n    desc: Build the project\n    cmds:\n      - task: setup\n      - echo \"Building project...\"\n      - touch build/output.txt\n\n  test:\n    desc: Run tests\n    cmds:\n      - task: build\n      - echo \"Running tests...\"\n</code></pre>"},{"location":"getting-started/quickstart/#using-environment-variables","title":"Using Environment Variables","text":"<p>You can define environment variables at different levels:</p> <pre><code>version: \"0.3\"\n\nenvironment:\n  GLOBAL_VAR: global-value\n\ntasks:\n  env-test:\n    desc: Test environment variables\n    environment:\n      TASK_VAR: task-value\n    cmds:\n      - echo \"Global: ${GLOBAL_VAR}\"\n      - echo \"Task: ${TASK_VAR}\"\n</code></pre>"},{"location":"getting-started/quickstart/#secret-management","title":"Secret Management","text":"<p>To use Azure Key Vault secrets:</p> <pre><code>version: \"0.3\"\n\nvaults:\n  azure_keyvault:\n    my-vault:\n      keyvault_name: my-keyvault\n      secrets:\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n\ntasks:\n  secret-test:\n    desc: Test secret access\n    cmds:\n      - echo \"Using API key: ${API_KEY}\"\n      - echo \"Using DB password: ${DB_PASSWORD}\"\n</code></pre>"},{"location":"getting-started/quickstart/#task-arguments","title":"Task Arguments","text":"<p>Define and validate task arguments:</p> <pre><code>version: \"0.3\"\n\ntasks:\n  deploy:\n    desc: Deploy to environment\n    args:\n      - name: env\n        type: string\n        default: dev\n      - name: version\n        type: string\n    cmds:\n      - echo \"Deploying version ${version} to ${env}\"\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn more about the Taskfile Format</li> <li>Explore Secret Management</li> <li>Read about Task Dependencies</li> <li>Check out Azure Key Vault Integration </li> </ul>"},{"location":"user-guide/secret-management/","title":"Secret Management","text":"<p>Kontraktor provides secure secret management through integration with various secret vaults. This guide explains how to use secret management features.</p>"},{"location":"user-guide/secret-management/#supported-vaults","title":"Supported Vaults","text":"<p>Currently, Kontraktor supports the following secret vaults:</p> <ul> <li>Azure Key Vault</li> <li>HashiCorp Vault (coming soon)</li> <li>AWS Secrets Manager (coming soon)</li> </ul>"},{"location":"user-guide/secret-management/#azure-key-vault-integration","title":"Azure Key Vault Integration","text":""},{"location":"user-guide/secret-management/#prerequisites","title":"Prerequisites","text":"<ol> <li>An Azure subscription</li> <li>An Azure Key Vault instance</li> <li>Proper authentication configured (see Azure Key Vault Integration for details)</li> </ol>"},{"location":"user-guide/secret-management/#configuration","title":"Configuration","text":"<p>Configure Azure Key Vault in your taskfile:</p> <pre><code>version: \"0.3\"\n\nvaults:\n  azure_keyvault:\n    my-vault:                    # Vault configuration name\n      keyvault_name: my-vault    # Azure Key Vault name\n      secrets:                   # Map of environment variables to secret names\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n</code></pre>"},{"location":"user-guide/secret-management/#using-secrets","title":"Using Secrets","text":"<p>Secrets are automatically loaded as environment variables and can be used in your tasks:</p> <pre><code>tasks:\n  deploy:\n    desc: Deploy with secrets\n    cmds:\n      - echo \"Using API key: ${API_KEY}\"\n      - echo \"Using DB password: ${DB_PASSWORD}\"\n</code></pre>"},{"location":"user-guide/secret-management/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never Store Secrets in Taskfiles</li> <li>Keep all sensitive data in vaults</li> <li>Don't commit secrets to version control</li> <li> <p>Use environment variables for non-sensitive configuration</p> </li> <li> <p>Access Control</p> </li> <li>Use least privilege principle</li> <li>Regularly rotate secrets</li> <li> <p>Monitor secret access</p> </li> <li> <p>Secret Naming</p> </li> <li>Use descriptive names</li> <li>Follow a consistent naming convention</li> <li> <p>Document secret purposes</p> </li> <li> <p>Error Handling</p> </li> <li>Handle missing secrets gracefully</li> <li>Log secret access errors</li> <li>Implement fallback mechanisms</li> </ol>"},{"location":"user-guide/secret-management/#secret-access-patterns","title":"Secret Access Patterns","text":""},{"location":"user-guide/secret-management/#direct-access","title":"Direct Access","text":"<pre><code>tasks:\n  direct-access:\n    cmds:\n      - echo \"Secret value: ${SECRET_NAME}\"\n</code></pre>"},{"location":"user-guide/secret-management/#conditional-access","title":"Conditional Access","text":"<pre><code>tasks:\n  conditional-access:\n    cmds:\n      - |\n        if [ -n \"${SECRET_NAME}\" ]; then\n          echo \"Secret is available\"\n        else\n          echo \"Secret is not available\"\n        fi\n</code></pre>"},{"location":"user-guide/secret-management/#secret-rotation","title":"Secret Rotation","text":"<pre><code>tasks:\n  rotate-secret:\n    desc: Rotate a secret\n    cmds:\n      - echo \"Current secret: ${OLD_SECRET}\"\n      - echo \"New secret: ${NEW_SECRET}\"\n      - echo \"Updating secret...\"\n</code></pre>"},{"location":"user-guide/secret-management/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/secret-management/#common-issues","title":"Common Issues","text":"<ol> <li>Authentication Failures</li> <li>Check Azure credentials</li> <li>Verify vault permissions</li> <li> <p>Check network connectivity</p> </li> <li> <p>Missing Secrets</p> </li> <li>Verify secret names</li> <li>Check vault configuration</li> <li> <p>Ensure proper access rights</p> </li> <li> <p>Environment Variable Issues</p> </li> <li>Check variable names</li> <li>Verify taskfile syntax</li> <li>Check vault configuration</li> </ol>"},{"location":"user-guide/secret-management/#debugging","title":"Debugging","text":"<p>Enable debug logging to troubleshoot secret access:</p> <pre><code>KONTRAKTOR_DEBUG=1 kontraktor run task-name\n</code></pre>"},{"location":"user-guide/secret-management/#advanced-topics","title":"Advanced Topics","text":"<ul> <li>Azure Key Vault Integration</li> <li>Secret Rotation Strategies</li> <li>Access Control and Permissions</li> </ul>"},{"location":"user-guide/secret-management/#examples","title":"Examples","text":""},{"location":"user-guide/secret-management/#complete-example","title":"Complete Example","text":"<pre><code>version: \"0.3\"\n\nvaults:\n  azure_keyvault:\n    prod-vault:\n      keyvault_name: prod-keyvault\n      secrets:\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n        JWT_SECRET: jwt-secret\n\ntasks:\n  deploy:\n    desc: Deploy to production\n    environment:\n      ENVIRONMENT: prod\n    cmds:\n      - echo \"Deploying to ${ENVIRONMENT}\"\n      - echo \"Using API key: ${API_KEY}\"\n      - echo \"Using DB password: ${DB_PASSWORD}\"\n      - echo \"Using JWT secret: ${JWT_SECRET}\"\n\n  rotate-secrets:\n    desc: Rotate production secrets\n    cmds:\n      - echo \"Rotating API key...\"\n      - echo \"Rotating DB password...\"\n      - echo \"Rotating JWT secret...\"\n</code></pre>"},{"location":"user-guide/task-dependencies/","title":"Task Dependencies","text":"<p>Kontraktor allows you to create complex workflows by defining dependencies between tasks. This document explains how to use task dependencies effectively.</p>"},{"location":"user-guide/task-dependencies/#basic-task-references","title":"Basic Task References","text":"<p>Tasks can reference other tasks using the <code>task</code> command type:</p> <pre><code>version: \"0.3\"\n\ntasks:\n  setup:\n    desc: Setup the environment\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Setting up environment...\"\n      - type: bash\n        content:\n          command: mkdir -p build\n\n  build:\n    desc: Build the project\n    cmds:\n      - type: task\n        content:\n          name: setup\n      - type: bash\n        content:\n          command: echo \"Building project...\"\n      - type: bash\n        content:\n          command: touch build/output.txt\n\n  test:\n    desc: Run tests\n    cmds:\n      - type: task\n        content:\n          name: build\n      - type: bash\n        content:\n          command: echo \"Running tests...\"\n</code></pre>"},{"location":"user-guide/task-dependencies/#passing-arguments-to-dependent-tasks","title":"Passing Arguments to Dependent Tasks","text":"<p>You can pass arguments to dependent tasks:</p> <pre><code>version: \"0.3\"\n\ntasks:\n  build:\n    desc: Build with version\n    args:\n      - name: version\n        type: string\n        default: 1.0.0\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Building version ${version}\"\n\n  deploy:\n    desc: Deploy the build\n    cmds:\n      - type: task\n        content:\n          name: build\n          args:\n            version: 2.0.0\n      - type: bash\n        content:\n          command: echo \"Deploying...\"\n</code></pre>"},{"location":"user-guide/task-dependencies/#environment-variable-inheritance","title":"Environment Variable Inheritance","text":"<p>Dependent tasks inherit environment variables from their parent tasks:</p> <pre><code>version: \"0.3\"\n\nenvironment:\n  GLOBAL_VAR: global\n\ntasks:\n  setup:\n    desc: Setup with environment\n    environment:\n      SETUP_VAR: setup-value\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Setup: ${SETUP_VAR}\"\n\n  build:\n    desc: Build with inherited environment\n    environment:\n      BUILD_VAR: build-value\n    cmds:\n      - type: task\n        content:\n          name: setup\n      - type: bash\n        content:\n          command: echo \"Build: ${BUILD_VAR}, ${SETUP_VAR}, ${GLOBAL_VAR}\"\n</code></pre>"},{"location":"user-guide/task-dependencies/#best-practices","title":"Best Practices","text":"<ol> <li>Task Organization</li> <li>Group related tasks together</li> <li>Use consistent naming conventions</li> <li> <p>Consider using task prefixes for organization</p> </li> <li> <p>Error Handling</p> </li> <li>Handle errors in dependent tasks</li> <li>Use appropriate exit codes</li> <li> <p>Consider using <code>--force</code> for specific cases</p> </li> <li> <p>Task Dependencies</p> </li> <li>Keep dependency chains short and clear</li> <li>Avoid circular dependencies</li> <li>Document task dependencies in descriptions</li> </ol>"},{"location":"user-guide/task-dependencies/#examples","title":"Examples","text":""},{"location":"user-guide/task-dependencies/#development-workflow","title":"Development Workflow","text":"<pre><code>version: \"0.3\"\n\ntasks:\n  clean:\n    desc: Clean build artifacts\n    cmds:\n      - type: bash\n        content:\n          command: rm -rf build/\n      - type: bash\n        content:\n          command: rm -rf dist/\n\n  install-deps:\n    desc: Install dependencies\n    cmds:\n      - type: bash\n        content:\n          command: npm install\n\n  lint:\n    desc: Run linter\n    cmds:\n      - type: task\n        content:\n          name: install-deps\n      - type: bash\n        content:\n          command: npm run lint\n\n  test:\n    desc: Run tests\n    cmds:\n      - type: task\n        content:\n          name: install-deps\n      - type: bash\n        content:\n          command: npm test\n\n  build:\n    desc: Build the application\n    cmds:\n      - type: task\n        content:\n          name: install-deps\n      - type: task\n        content:\n          name: lint\n      - type: task\n        content:\n          name: test\n      - type: bash\n        content:\n          command: npm run build\n\n  deploy:\n    desc: Deploy to production\n    cmds:\n      - type: task\n        content:\n          name: build\n      - type: bash\n        content:\n          command: npm run deploy\n</code></pre>"},{"location":"user-guide/task-dependencies/#cicd-pipeline","title":"CI/CD Pipeline","text":"<pre><code>version: \"0.3\"\n\ntasks:\n  validate:\n    desc: Validate code\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Validating code...\"\n\n  security-scan:\n    desc: Run security scan\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Running security scan...\"\n\n  build:\n    desc: Build artifacts\n    cmds:\n      - type: task\n        content:\n          name: validate\n      - type: task\n        content:\n          name: security-scan\n      - type: bash\n        content:\n          command: echo \"Building artifacts...\"\n\n  test:\n    desc: Run tests\n    cmds:\n      - type: task\n        content:\n          name: build\n      - type: bash\n        content:\n          command: echo \"Running tests...\"\n\n  package:\n    desc: Package artifacts\n    cmds:\n      - type: task\n        content:\n          name: test\n      - type: bash\n        content:\n          command: echo \"Packaging artifacts...\"\n\n  deploy-staging:\n    desc: Deploy to staging\n    cmds:\n      - type: task\n        content:\n          name: package\n      - type: bash\n        content:\n          command: echo \"Deploying to staging...\"\n\n  deploy-prod:\n    desc: Deploy to production\n    cmds:\n      - type: task\n        content:\n          name: deploy-staging\n      - type: bash\n        content:\n          command: echo \"Deploying to production...\"\n</code></pre>"},{"location":"user-guide/task-dependencies/#multi-environment-deployment","title":"Multi-Environment Deployment","text":"<pre><code>version: \"0.3\"\n\ntasks:\n  build:\n    desc: Build the application\n    args:\n      - name: env\n        type: string\n        default: dev\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Building for ${env}\"\n\n  deploy:\n    desc: Deploy to environment\n    args:\n      - name: env\n        type: string\n        default: dev\n    cmds:\n      - type: task\n        content:\n          name: build\n          args:\n            env: ${env}\n      - type: bash\n        content:\n          command: echo \"Deploying to ${env}\"\n</code></pre>"},{"location":"user-guide/task-dependencies/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/task-dependencies/#common-issues","title":"Common Issues","text":"<ol> <li>Circular Dependencies</li> <li>Error: \"Circular dependency detected\"</li> <li> <p>Solution: Review and restructure task dependencies</p> </li> <li> <p>Missing Dependencies</p> </li> <li>Error: \"Task not found\"</li> <li> <p>Solution: Check task names and ensure they exist</p> </li> <li> <p>Execution Order</p> </li> <li>Issue: Tasks not executing in expected order</li> <li>Solution: Review dependency chain and task definitions</li> </ol>"},{"location":"user-guide/task-dependencies/#debugging","title":"Debugging","text":"<p>Enable debug logging to see dependency resolution:</p> <pre><code>KONTRAKTOR_DEBUG=1 kontraktor run task-name\n</code></pre>"},{"location":"user-guide/taskfile-format/","title":"Taskfile Format","text":"<p>The Kontraktor taskfile is written in YAML format and uses the <code>.ktr.yml</code> extension. This document describes the structure and available options.</p>"},{"location":"user-guide/taskfile-format/#basic-structure","title":"Basic Structure","text":"<pre><code>version: \"0.3\"  # Required: Version of the taskfile format\n\nimports:        # Optional: Import tasks from other taskfiles\n  - path/to/taskfile.ktr.yml\n  - https://github.com/user/repo.git//path/to/taskfile.ktr.yml\n\nenvironment:    # Optional: Global environment variables\n  KEY: value\n\nvaults:         # Optional: Secret vault configurations\n  azure_keyvault:\n    vault-name:\n      keyvault_name: name\n      secrets:\n        ENV_VAR: secret-name\n\ntasks:          # Required: Task definitions\n  task-name:\n    desc: \"Task description\"\n    args:\n      - name: arg-name\n        type: string\n        default: value\n    environment:\n      KEY: value\n    cmds:\n      - type: bash\n        content:\n          command: command-string\n      - type: task\n        content:\n          name: task-name\n          args:\n            key: value\n</code></pre>"},{"location":"user-guide/taskfile-format/#version","title":"Version","text":"<p>The <code>version</code> field is required and specifies the version of the taskfile format. Currently, only version \"0.3\" is supported.</p>"},{"location":"user-guide/taskfile-format/#imports","title":"Imports","text":"<p>The <code>imports</code> field allows you to import tasks from other taskfiles. You can import from: - Local files - HTTP(S) URLs - Git repositories (using the format <code>https://github.com/user/repo.git//path/to/file</code>)</p> <p>Imported tasks are merged with the main taskfile, with tasks in the main file taking precedence.</p>"},{"location":"user-guide/taskfile-format/#environment-variables","title":"Environment Variables","text":"<p>Environment variables can be defined at three levels:</p> <ol> <li>Global (taskfile level)</li> <li>Task level</li> <li>Command level (through variable substitution)</li> </ol> <pre><code>version: \"0.3\"\n\nenvironment:\n  GLOBAL_VAR: global-value\n\ntasks:\n  env-test:\n    environment:\n      TASK_VAR: task-value\n    cmds:\n      - type: bash\n        content:\n          command: echo \"${GLOBAL_VAR}\"  # Uses global variable\n      - type: bash\n        content:\n          command: echo \"${TASK_VAR}\"   # Uses task variable\n</code></pre>"},{"location":"user-guide/taskfile-format/#tasks","title":"Tasks","text":"<p>Tasks are the main building blocks of a taskfile. Each task can have:</p> <ul> <li>Description</li> <li>Arguments</li> <li>Environment variables</li> <li>Commands</li> </ul>"},{"location":"user-guide/taskfile-format/#task-arguments","title":"Task Arguments","text":"<p>Arguments can be defined with name, type, and optional default value:</p> <pre><code>tasks:\n  deploy:\n    args:\n      - name: environment\n        type: string\n        default: dev\n      - name: version\n        type: string\n</code></pre>"},{"location":"user-guide/taskfile-format/#task-commands","title":"Task Commands","text":"<p>Commands can be of different types:</p> <ol> <li> <p>Bash commands:    <pre><code>cmds:\n  - type: bash\n    content:\n      command: echo \"Hello, World!\"\n  - type: bash\n    content:\n      command: ls -la\n</code></pre></p> </li> <li> <p>Task references:    <pre><code>cmds:\n  - type: task\n    content:\n      name: setup\n      args:\n        key: value\n</code></pre></p> </li> <li> <p>Docker commands:    <pre><code>cmds:\n  - type: docker\n    content:\n      image: node:latest\n      command: [\"npm\", \"start\"]\n      environment:\n        NODE_ENV: production\n      volumes:\n        ./src:/app/src\n</code></pre></p> </li> </ol>"},{"location":"user-guide/taskfile-format/#secret-management","title":"Secret Management","text":""},{"location":"user-guide/taskfile-format/#azure-key-vault","title":"Azure Key Vault","text":"<pre><code>vaults:\n  azure_keyvault:\n    my-vault:\n      keyvault_name: my-keyvault\n      secrets:\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n</code></pre>"},{"location":"user-guide/taskfile-format/#variable-substitution","title":"Variable Substitution","text":"<p>Variables can be substituted in commands using <code>${VAR_NAME}</code> syntax:</p> <pre><code>tasks:\n  greet:\n    args:\n      - name: name\n        default: World\n    cmds:\n      - type: bash\n        content:\n          command: echo \"Hello, ${name}!\"\n</code></pre>"},{"location":"user-guide/taskfile-format/#best-practices","title":"Best Practices","text":"<ol> <li>Task Organization</li> <li>Group related tasks together</li> <li>Use descriptive task names</li> <li> <p>Include clear descriptions</p> </li> <li> <p>Environment Variables</p> </li> <li>Use global variables for project-wide settings</li> <li>Use task variables for task-specific settings</li> <li> <p>Keep sensitive data in vaults</p> </li> <li> <p>Arguments</p> </li> <li>Provide default values when possible</li> <li>Use descriptive argument names</li> <li> <p>Document required arguments</p> </li> <li> <p>Secret Management</p> </li> <li>Never store secrets in the taskfile</li> <li>Use vaults for all sensitive data</li> <li> <p>Use descriptive secret names</p> </li> <li> <p>Command Structure</p> </li> <li>Always use the explicit command type and content structure</li> <li>Group related commands together</li> <li>Use meaningful command descriptions</li> </ol>"},{"location":"user-guide/taskfile-format/#examples","title":"Examples","text":""},{"location":"user-guide/taskfile-format/#complete-example","title":"Complete Example","text":"<pre><code>version: \"0.3\"\n\nimports:\n  - https://github.com/kontraktor-sh/kontraktor.git//templates/docker.ktr.yml\n\nenvironment:\n  PROJECT_NAME: my-project\n  BUILD_DIR: build\n\nvaults:\n  azure_keyvault:\n    prod-vault:\n      keyvault_name: prod-keyvault\n      secrets:\n        API_KEY: api-secret\n        DB_PASSWORD: db-secret\n\ntasks:\n  setup:\n    desc: Setup the build environment\n    cmds:\n      - type: bash\n        content:\n          command: mkdir -p ${BUILD_DIR}\n      - type: bash\n        content:\n          command: echo \"Setup complete\"\n\n  build:\n    desc: Build the project\n    args:\n      - name: version\n        type: string\n        default: 1.0.0\n    cmds:\n      - type: task\n        content:\n          name: setup\n      - type: bash\n        content:\n          command: echo \"Building ${PROJECT_NAME} version ${version}\"\n      - type: bash\n        content:\n          command: touch ${BUILD_DIR}/output.txt\n\n  deploy:\n    desc: Deploy to environment\n    args:\n      - name: env\n        type: string\n        default: dev\n    environment:\n      DEPLOY_ENV: ${env}\n    cmds:\n      - type: task\n        content:\n          name: build\n      - type: bash\n        content:\n          command: echo \"Deploying to ${DEPLOY_ENV}\"\n      - type: bash\n        content:\n          command: echo \"Using API key: ${API_KEY}\"\n</code></pre>"}]}